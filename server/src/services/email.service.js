// services/email.service.js
const nodemailer = require('nodemailer');
const logger = require('../utils/logger');

/**
 * Servicio para el env√≠o de emails
 */
class EmailService {
  constructor() {
    this.isDev = process.env.NODE_ENV !== 'production';
    this.transporter = null;
    
    // Mostrar variables de entorno (ocultando la contrase√±a)
    console.log('üîß EmailService - Variables de entorno:');
    console.log(`  HOST: ${process.env.EMAIL_HOST}`);
    console.log(`  PORT: ${process.env.EMAIL_PORT}`);
    console.log(`  USER: ${process.env.EMAIL_USER}`);
    console.log(`  FROM: ${process.env.EMAIL_FROM}`);
    console.log(`  PASS: ${process.env.EMAIL_PASS ? '******' : 'No configurado'}`);
    console.log(`  MODE: ${this.isDev ? 'Desarrollo' : 'Producci√≥n'}`);
    
    logger.info('EmailService inicializado. Modo: ' + (this.isDev ? 'desarrollo' : 'producci√≥n'));
  }

  /**
   * Inicializa el transporter si no existe a√∫n
   */
  async _initializeTransporter() {
    console.log('üîÑ Inicializando transporter de email...');
    
    if (this.transporter) {
      console.log('‚úÖ Transporter ya existe, saltando inicializaci√≥n');
      return;
    }

    try {
      if (this.isDev && process.env.USE_ETHEREAL === 'true') {
        // Crear cuenta de prueba en Ethereal para desarrollo
        console.log('üß™ Creando cuenta de prueba en Ethereal...');
        logger.info('Creando cuenta de prueba en Ethereal...');
        const testAccount = await nodemailer.createTestAccount();
        
        this.transporter = nodemailer.createTransport({
          host: 'smtp.ethereal.email',
          port: 587,
          secure: false, // true para 465, false para otros puertos
          auth: {
            user: testAccount.user,
            pass: testAccount.pass
          }
        });
        
        console.log(`‚úÖ Cuenta Ethereal creada: ${testAccount.user}`);
        logger.info('Cuenta de prueba en Ethereal creada:');
        logger.info(`- Usuario: ${testAccount.user}`);
        logger.info(`- Contrase√±a: ${testAccount.pass}`);
        logger.info('Los emails enviados se podr√°n ver en https://ethereal.email');
      } else {
        // Configuraci√≥n personalizada para Cookie21
        console.log('üîß Configurando transporter SMTP para Cookie21...');
        console.log(`  Host: ${process.env.EMAIL_HOST}`);
        console.log(`  Puerto: ${process.env.EMAIL_PORT}`);
        console.log(`  Usuario: ${process.env.EMAIL_USER}`);
        console.log(`  Secure: ${process.env.EMAIL_PORT === '465' ? 'true' : 'false'}`);
        
        this.transporter = nodemailer.createTransport({
          host: process.env.EMAIL_HOST || 'cookie21.com',
          port: parseInt(process.env.EMAIL_PORT || '465'),
          secure: process.env.EMAIL_PORT === '465', // true para 465, false para otros puertos
          auth: {
            user: process.env.EMAIL_USER || 'noreply@cookie21.com',
            pass: process.env.EMAIL_PASS || '4s^yB0s54'
          },
          debug: true, // Activar debug de SMTP
          logger: true, // Activar logs internos de nodemailer
          tls: {
            rejectUnauthorized: false // Ayuda con algunos problemas de certificados
          }
        });
        
        console.log('‚úÖ Transporter SMTP configurado');
        logger.info(`Configuraci√≥n SMTP: ${process.env.EMAIL_HOST}:${process.env.EMAIL_PORT}`);
      }

      // Verificar configuraci√≥n
      console.log('üîÑ Verificando conexi√≥n SMTP...');
      await this.transporter.verify();
      console.log('‚úÖ Conexi√≥n SMTP verificada exitosamente');
      logger.info('Conexi√≥n SMTP verificada exitosamente');
    } catch (error) {
      console.error('‚ùå Error al inicializar transporter:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      logger.error(`Error al inicializar transporter: ${error.message}`, error);
      
      if (this.isDev) {
        // En desarrollo, si falla la conexi√≥n SMTP, usaremos una simulaci√≥n de env√≠o
        console.log('‚ö†Ô∏è Usando simulaci√≥n de env√≠o para desarrollo');
        logger.info('Usando simulaci√≥n de env√≠o para desarrollo');
        this.transporter = null;
      } else {
        throw error;
      }
    }
  }

  /**
   * Env√≠a un email de invitaci√≥n a un usuario
   * @param {Object} options - Opciones del email
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async sendInvitationEmail(options) {
    console.log('üìß Enviando email de invitaci√≥n...');
    console.log('  Destinatario:', options.email);
    console.log('  Cliente:', options.clientName);
    console.log('  Env√≠o directo:', options.sendDirect ? 'S√≠' : 'No');
    
    try {
      const { email, name, invitationToken, clientName, role, sendDirect = false } = options;
      
      if (!email || !name || !invitationToken) {
        console.error('‚ùå Faltan campos requeridos para el email de invitaci√≥n');
        logger.error('Faltan campos requeridos para el email de invitaci√≥n');
        return {
          success: false,
          error: 'Faltan campos requeridos'
        };
      }
      
      // Construir la URL de invitaci√≥n
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
      const inviteUrl = `${frontendUrl}/invitacion/${invitationToken}`;
      console.log('  URL de invitaci√≥n:', inviteUrl);
      
      // Contenido del email
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Invitaci√≥n a ${clientName}</title>
          <style>
            body, html { 
              margin: 0;
              padding: 0;
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
              color: #1a202c;
              line-height: 1.6;
              background-color: #f7fafc;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              background-color: #ffffff;
            }
            .header {
              background-color: #235C88;
              padding: 30px;
              text-align: center;
            }
            .header img {
              max-height: 50px;
              width: auto;
            }
            .content {
              padding: 40px 30px;
            }
            h1 {
              color: #235C88;
              margin: 0 0 20px 0;
              font-size: 28px;
              font-weight: 600;
            }
            p {
              margin: 0 0 16px 0;
              color: #4a5568;
            }
            .button {
              display: inline-block;
              padding: 14px 32px;
              background-color: #235C88;
              color: white !important;
              text-decoration: none;
              border-radius: 6px;
              font-weight: 600;
              margin: 24px 0;
              transition: background-color 0.2s;
            }
            .button:hover {
              background-color: #1a4668;
            }
            .info-box {
              background-color: #EBF8FF;
              border-left: 4px solid #235C88;
              padding: 16px;
              margin: 24px 0;
              border-radius: 0 4px 4px 0;
            }
            .footer {
              background-color: #f7fafc;
              padding: 30px;
              text-align: center;
              border-top: 1px solid #e2e8f0;
            }
            .footer p {
              margin: 0;
              font-size: 14px;
              color: #718096;
            }
            .footer a {
              color: #235C88;
              text-decoration: none;
            }
            @media (max-width: 600px) {
              .content {
                padding: 30px 20px;
              }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="${process.env.BACKEND_URL || 'https://api.cookie21.com'}/emails/logoB.png" alt="Cookie21 Logo">
            </div>
            
            <div class="content">
              <h1>Te han invitado a ${clientName}</h1>
              <p>Hola ${name},</p>
              <p>Has sido invitado a unirte a <strong>${clientName}</strong> con el rol de <strong>${role || 'usuario'}</strong>.</p>
              
              <div class="info-box">
                <p style="margin: 0;"><strong>üìß Tu email:</strong> ${email}</p>
                <p style="margin: 8px 0 0 0;"><strong>üè¢ Cliente:</strong> ${clientName}</p>
                <p style="margin: 8px 0 0 0;"><strong>üë§ Rol asignado:</strong> ${role || 'usuario'}</p>
              </div>
              
              <p>Para completar tu registro y establecer tu contrase√±a, haz clic en el siguiente bot√≥n:</p>
              
              <div style="text-align: center;">
                <a href="${inviteUrl}" class="button">Completar registro</a>
              </div>
              
              <p style="font-size: 14px; color: #718096;">O copia y pega esta URL en tu navegador:</p>
              <p style="font-size: 14px; word-break: break-all; color: #718096;">${inviteUrl}</p>
              
              <p style="margin-top: 24px; font-size: 14px; color: #718096;">‚è∞ Este enlace expirar√° en <strong>7 d√≠as</strong>.</p>
              
              <p style="margin-top: 32px;">Si tienes alguna pregunta, no dudes en contactarnos.</p>
              <p>Saludos cordiales,<br><strong>El equipo de ${clientName}</strong></p>
            </div>
            
            <div class="footer">
              <p>&copy; ${new Date().getFullYear()} Cookie21. Todos los derechos reservados.</p>
              <p style="margin-top: 8px;">
                <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/privacy">Pol√≠tica de Privacidad</a> | 
                <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/terms">T√©rminos de Uso</a>
              </p>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Si el transporter es null en desarrollo, simular el env√≠o
      if (this.isDev && !this.transporter && !sendDirect) {
        console.log('üß™ SIMULACI√ìN DE EMAIL DE INVITACI√ìN');
        console.log(`  Para: ${email}`);
        console.log(`  Asunto: Invitaci√≥n a ${clientName}`);
        console.log(`  Token: ${invitationToken.substring(0, 8)}...`);
        
        logger.info('=== SIMULACI√ìN DE EMAIL ===');
        logger.info(`Para: ${email}`);
        logger.info(`Asunto: Invitaci√≥n a ${clientName}`);
        logger.info(`Token: ${invitationToken.substring(0, 8)}...`);
        logger.info(`URL: ${inviteUrl}`);
        logger.info('=== FIN DE SIMULACI√ìN ===');
        
        return {
          success: true,
          jobId: `simulated-${Date.now()}`,
          previewUrl: null,
          simulado: true
        };
      }
      
      // Inicializar transporter si no existe
      if (!this.transporter || sendDirect) {
        console.log('üîÑ Inicializando transporter para env√≠o...');
        await this._initializeTransporter();
      }
      
      // Verificar que tenemos un transporter
      if (!this.transporter) {
        console.error('‚ùå No se pudo inicializar el transporter');
        return {
          success: false,
          error: 'No se pudo inicializar el transporter de email'
        };
      }
      
      // Preparar opciones del email
      const fromEmail = process.env.EMAIL_FROM || `"${clientName}" <noreply@cookie21.com>`;
      console.log('  Remitente:', fromEmail);
      
      const mailOptions = {
        from: fromEmail,
        to: email,
        subject: `Invitaci√≥n a ${clientName}`,
        html: htmlContent,
        text: `
          Invitaci√≥n a ${clientName}
          
          Hola ${name},
          
          Has sido invitado a unirte a ${clientName} con el rol de ${role || 'usuario'}.
          
          Para completar tu registro, visita el siguiente enlace:
          ${inviteUrl}
          
          Este enlace expirar√° en 7 d√≠as.
          
          Si no has solicitado esta invitaci√≥n, puedes ignorar este mensaje.
          
          Saludos,
          El equipo de ${clientName}
        `
      };
      
      // Enviar email
      console.log('üîÑ Enviando email...');
      const info = await this.transporter.sendMail(mailOptions);
      console.log('‚úÖ Email enviado correctamente');
      console.log('  ID del mensaje:', info.messageId);
      console.log('  Respuesta:', info.response);
      
      logger.info(`Email de invitaci√≥n enviado a ${email}`);
      
      // Si estamos en desarrollo con Ethereal, mostrar URL de previsualizaci√≥n
      const previewUrl = this.isDev && process.env.USE_ETHEREAL === 'true' ? nodemailer.getTestMessageUrl(info) : null;
      if (previewUrl) {
        console.log('  Previsualizaci√≥n:', previewUrl);
        logger.info(`Previsualizaci√≥n: ${previewUrl}`);
      }
      
      return {
        success: true,
        jobId: info.messageId,
        previewUrl
      };
    } catch (error) {
      console.error('‚ùå Error al enviar email de invitaci√≥n:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      logger.error(`Error al enviar email de invitaci√≥n: ${error.message}`, error);
      return {
        success: false,
        error: error.message,
        details: {
          name: error.name,
          code: error.code,
          command: error.command,
          responseCode: error.responseCode,
          response: error.response
        }
      };
    }
  }

  /**
   * Env√≠a un email de bienvenida a un usuario que complet√≥ su registro
   * @param {Object} options - Opciones del email
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async sendWelcomeEmail(options) {
    console.log('üìß Enviando email de bienvenida...');
    console.log('  Destinatario:', options.email);
    
    try {
      const { email, name, clientName } = options;
      
      if (!email || !name) {
        console.error('‚ùå Faltan campos requeridos para el email de bienvenida');
        logger.error('Faltan campos requeridos para el email de bienvenida');
        return {
          success: false,
          error: 'Faltan campos requeridos'
        };
      }
      
      // Construir la URL de login
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      const loginUrl = `${frontendUrl}/login`;
      console.log('  URL de login:', loginUrl);
      
      // Contenido del email
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>¬°Bienvenido a ${clientName}!</title>
          <style>
            body, html { 
              margin: 0;
              padding: 0;
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
              color: #1a202c;
              line-height: 1.6;
              background-color: #f7fafc;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              background-color: #ffffff;
            }
            .header {
              background: linear-gradient(135deg, #235C88 0%, #1a4668 100%);
              padding: 40px 30px;
              text-align: center;
            }
            .header img {
              max-height: 80px;
              width: auto;
              display: block;
              margin: 0 auto 20px auto;
            }
            .welcome-badge {
              display: inline-block;
              background-color: rgba(255, 255, 255, 0.2);
              color: white;
              padding: 8px 20px;
              border-radius: 20px;
              font-size: 14px;
              font-weight: 600;
              margin: 0 auto;
              clear: both;
            }
            .content {
              padding: 40px 30px;
            }
            h1 {
              color: #235C88;
              margin: 0 0 20px 0;
              font-size: 32px;
              font-weight: 600;
              text-align: center;
            }
            p {
              margin: 0 0 16px 0;
              color: #4a5568;
            }
            .button {
              display: inline-block;
              padding: 14px 32px;
              background-color: #235C88;
              color: white !important;
              text-decoration: none;
              border-radius: 6px;
              font-weight: 600;
              margin: 24px 0;
              transition: all 0.2s;
              box-shadow: 0 4px 6px rgba(35, 92, 136, 0.2);
            }
            .button:hover {
              background-color: #1a4668;
              box-shadow: 0 6px 8px rgba(35, 92, 136, 0.3);
            }
            .feature-list {
              background-color: #f7fafc;
              border-radius: 8px;
              padding: 24px;
              margin: 24px 0;
            }
            .feature-item {
              display: flex;
              align-items: start;
              margin-bottom: 16px;
            }
            .feature-icon {
              color: #235C88;
              margin-right: 12px;
              font-size: 20px;
            }
            .footer {
              background-color: #f7fafc;
              padding: 30px;
              text-align: center;
              border-top: 1px solid #e2e8f0;
            }
            .footer p {
              margin: 0;
              font-size: 14px;
              color: #718096;
            }
            .footer a {
              color: #235C88;
              text-decoration: none;
            }
            @media (max-width: 600px) {
              .content {
                padding: 30px 20px;
              }
              h1 {
                font-size: 28px;
              }
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="${process.env.BACKEND_URL || 'https://api.cookie21.com'}/emails/logoB.png" alt="Cookie21 Logo">
              <div class="welcome-badge">üéâ Cuenta Activada</div>
            </div>
            
            <div class="content">
              <h1>¬°Bienvenido a ${clientName}!</h1>
              <p style="text-align: center; font-size: 18px; color: #2d3748;">Hola ${name},</p>
              <p style="text-align: center;">Tu cuenta ha sido activada correctamente y ya puedes comenzar a utilizar Cookie21.</p>
              
              <div class="feature-list">
                <h3 style="margin-top: 0; color: #235C88;">¬øQu√© puedes hacer ahora?</h3>
                <div class="feature-item">
                  <span class="feature-icon">‚úÖ</span>
                  <div>
                    <strong>Configurar tu banner de cookies</strong><br>
                    <span style="font-size: 14px; color: #718096;">Personaliza el dise√±o y los textos de tu aviso de cookies</span>
                  </div>
                </div>
                <div class="feature-item">
                  <span class="feature-icon">üìä</span>
                  <div>
                    <strong>Analizar las cookies de tu sitio</strong><br>
                    <span style="font-size: 14px; color: #718096;">Escanea tu web para detectar todas las cookies activas</span>
                  </div>
                </div>
                <div class="feature-item">
                  <span class="feature-icon">üìà</span>
                  <div>
                    <strong>Ver estad√≠sticas de consentimiento</strong><br>
                    <span style="font-size: 14px; color: #718096;">Monitoriza las preferencias de tus usuarios</span>
                  </div>
                </div>
              </div>
              
              <div style="text-align: center;">
                <a href="${loginUrl}" class="button">Iniciar sesi√≥n</a>
              </div>
              
              <p style="text-align: center; margin-top: 32px; font-size: 14px; color: #718096;">
                Si necesitas ayuda, visita nuestra <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/documentation" style="color: #235C88;">documentaci√≥n</a> o cont√°ctanos.
              </p>
            </div>
            
            <div class="footer">
              <p><strong>El equipo de Cookie21</strong></p>
              <p style="margin-top: 16px;">&copy; ${new Date().getFullYear()} Cookie21. Todos los derechos reservados.</p>
              <p style="margin-top: 8px;">
                <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/privacy">Pol√≠tica de Privacidad</a> | 
                <a href="${process.env.FRONTEND_URL || 'http://localhost:5173'}/terms">T√©rminos de Uso</a>
              </p>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Si el transporter es null en desarrollo, simular el env√≠o
      if (this.isDev && !this.transporter) {
        console.log('üß™ SIMULACI√ìN DE EMAIL DE BIENVENIDA');
        console.log(`  Para: ${email}`);
        console.log(`  Asunto: ¬°Bienvenido a ${clientName}!`);
        
        logger.info('=== SIMULACI√ìN DE EMAIL ===');
        logger.info(`Para: ${email}`);
        logger.info(`Asunto: ¬°Bienvenido a ${clientName}!`);
        logger.info(`URL de login: ${loginUrl}`);
        logger.info('=== FIN DE SIMULACI√ìN ===');
        
        return {
          success: true,
          jobId: `simulated-${Date.now()}`,
          previewUrl: null,
          simulado: true
        };
      }
      
      // Inicializar transporter si no existe
      if (!this.transporter) {
        console.log('üîÑ Inicializando transporter para env√≠o...');
        await this._initializeTransporter();
      }
      
      // Verificar que tenemos un transporter
      if (!this.transporter) {
        console.error('‚ùå No se pudo inicializar el transporter');
        return {
          success: false,
          error: 'No se pudo inicializar el transporter de email'
        };
      }
      
      // Preparar opciones del email
      const fromEmail = process.env.EMAIL_FROM || `"${clientName}" <noreply@cookie21.com>`;
      console.log('  Remitente:', fromEmail);
      
      // Enviar el email
      console.log('üîÑ Enviando email...');
      const info = await this.transporter.sendMail({
        from: fromEmail,
        to: email,
        subject: `¬°Bienvenido a ${clientName}!`,
        html: htmlContent,
        text: `
          ¬°Bienvenido a ${clientName}!
          
          Hola ${name},
          
          Tu cuenta ha sido activada correctamente.
          
          Ya puedes acceder a la plataforma con tu email y contrase√±a:
          ${loginUrl}
          
          Si tienes alguna pregunta, no dudes en contactarnos.
          
          Saludos,
          El equipo de ${clientName}
        `
      });
      
      console.log('‚úÖ Email enviado correctamente');
      console.log('  ID del mensaje:', info.messageId);
      console.log('  Respuesta:', info.response);
      
      logger.info(`Email de bienvenida enviado a ${email}`);
      
      // Si estamos en desarrollo con Ethereal, mostrar URL de previsualizaci√≥n
      const previewUrl = this.isDev && process.env.USE_ETHEREAL === 'true' ? nodemailer.getTestMessageUrl(info) : null;
      if (previewUrl) {
        console.log('  Previsualizaci√≥n:', previewUrl);
        logger.info(`Previsualizaci√≥n: ${previewUrl}`);
      }
      
      return {
        success: true,
        jobId: info.messageId,
        previewUrl
      };
    } catch (error) {
      console.error('‚ùå Error al enviar email de bienvenida:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      logger.error(`Error al enviar email de bienvenida: ${error.message}`, error);
      return {
        success: false,
        error: error.message,
        details: {
          name: error.name,
          code: error.code,
          command: error.command,
          responseCode: error.responseCode,
          response: error.response
        }
      };
    }
  }
  
  /**
   * Env√≠a un email con el estilo de Cookies21
   * @param {Object} options - Opciones del email
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async sendCookies21Email(options) {
    console.log('üìß Enviando email con plantilla Cookie21...');
    console.log('  Destinatario:', options.email);
    console.log('  Asunto:', options.subject);
    
    try {
      const { email, name, subject, message, buttonText, buttonUrl, clientName = 'Cookie21' } = options;
      
      if (!email || !name || !subject || !message) {
        console.error('‚ùå Faltan campos requeridos para el email de Cookie21');
        logger.error('Faltan campos requeridos para el email de Cookie21');
        return {
          success: false,
          error: 'Faltan campos requeridos'
        };
      }
      
      // URL base para im√°genes
      const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
      
      // Contenido del email con estilo Cookie21
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${subject}</title>
          <style>
            body, html { 
              margin: 0;
              padding: 0;
              font-family: Arial, sans-serif;
              color: #333;
              line-height: 1.5;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
              background-color: #f9f9f9;
            }
            .header {
              text-align: center;
              padding: 20px 0;
              border-bottom: 1px solid #eaeaea;
              margin-bottom: 30px;
            }
            .header img {
              max-height: 60px;
              width: auto;
            }
            .content {
              padding: 20px;
              background: white;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            }
            h1 {
              color: #2c5282;
              margin-top: 0;
              font-size: 24px;
            }
            .button {
              display: inline-block;
              padding: 12px 24px;
              background-color: #2c5282;
              color: white !important;
              text-decoration: none;
              border-radius: 4px;
              font-weight: bold;
              margin: 20px 0;
              text-align: center;
            }
            .footer {
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #eaeaea;
              color: #666;
              font-size: 12px;
              text-align: center;
            }
            .social-links {
              margin: 15px 0;
            }
            .social-links a {
              display: inline-block;
              margin: 0 5px;
            }
            .contact-info {
              margin-top: 15px;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="${process.env.BACKEND_URL || 'https://api.cookie21.com'}/emails/logoO.png" alt="Cookie21 Logo">
            </div>
            
            <div class="content">
              <h1>${subject}</h1>
              <p>Hola ${name},</p>
              ${message}
              
              ${buttonText && buttonUrl ? `
              <div style="text-align: center;">
                <a href="${buttonUrl}" class="button">${buttonText}</a>
              </div>
              ` : ''}
              
              <p>Si tienes alguna pregunta, no dudes en contactarnos.</p>
              <p>Saludos,<br>El equipo de ${clientName}</p>
            </div>
            
            <div class="footer">
              <div class="social-links">
                <a href="https://twitter.com/cookie21es" target="_blank">Twitter</a> | 
                <a href="https://www.linkedin.com/company/cookie21" target="_blank">LinkedIn</a> |
                <a href="https://www.facebook.com/cookie21es" target="_blank">Facebook</a>
              </div>
              
              <div class="contact-info">
                <p>&copy; ${new Date().getFullYear()} Cookies 21. Todos los derechos reservados.</p>
                <p>
                  <a href="${baseUrl}/politica-privacidad">Pol√≠tica de Privacidad</a> | 
                  <a href="${baseUrl}/aviso-legal">Aviso Legal</a> |
                  <a href="${baseUrl}/contacto">Contacto</a>
                </p>
              </div>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Versi√≥n de texto plano
      const textContent = `
        ${subject}
        
        Hola ${name},
        
        ${message.replace(/<[^>]*>?/gm, '')}
        
        ${buttonText && buttonUrl ? `${buttonText}: ${buttonUrl}` : ''}
        
        Si tienes alguna pregunta, no dudes en contactarnos.
        
        Saludos,
        El equipo de ${clientName}
        
        ¬© ${new Date().getFullYear()} ${clientName}. Todos los derechos reservados.
      `;
      
      // Si el transporter es null en desarrollo, simular el env√≠o
      if (this.isDev && !this.transporter) {
        console.log('üß™ SIMULACI√ìN DE EMAIL COOKIE21');
        console.log(`  Para: ${email}`);
        console.log(`  Asunto: ${subject}`);
        console.log(`  Mensaje: ${message.substring(0, 50)}...`);
        if (buttonText && buttonUrl) {
          console.log(`  Bot√≥n: ${buttonText} - ${buttonUrl}`);
        }
        
        logger.info('=== SIMULACI√ìN DE EMAIL COOKIE21 ===');
        logger.info(`Para: ${email}`);
        logger.info(`Asunto: ${subject}`);
        logger.info(`Mensaje: ${message.substring(0, 50)}...`);
        if (buttonText && buttonUrl) {
          logger.info(`Bot√≥n: ${buttonText} - ${buttonUrl}`);
        }
        logger.info('=== FIN DE SIMULACI√ìN ===');
        
        return {
          success: true,
          jobId: `simulated-${Date.now()}`,
          previewUrl: null,
          simulado: true
        };
      }
      
      // Inicializar transporter si no existe
      if (!this.transporter) {
        console.log('üîÑ Inicializando transporter para env√≠o...');
        await this._initializeTransporter();
      }
      
      // Verificar que tenemos un transporter
      if (!this.transporter) {
        console.error('‚ùå No se pudo inicializar el transporter');
        return {
          success: false,
          error: 'No se pudo inicializar el transporter de email'
        };
      }
      
      // Preparar opciones del email
      const fromEmail = process.env.EMAIL_FROM || `"${clientName}" <noreply@cookie21.com>`;
      console.log('  Remitente:', fromEmail);
      
      // Enviar el email
      console.log('üîÑ Enviando email...');
      const info = await this.transporter.sendMail({
        from: fromEmail,
        to: email,
        subject: subject,
        html: htmlContent,
        text: textContent
      });
      
      console.log('‚úÖ Email enviado correctamente');
      console.log('  ID del mensaje:', info.messageId);
      console.log('  Respuesta:', info.response);
      
      logger.info(`Email de Cookie21 enviado a ${email}`);
      
      // Si estamos en desarrollo con Ethereal, mostrar URL de previsualizaci√≥n
      const previewUrl = this.isDev && process.env.USE_ETHEREAL === 'true' ? nodemailer.getTestMessageUrl(info) : null;
      if (previewUrl) {
        console.log('  Previsualizaci√≥n:', previewUrl);
        logger.info(`Previsualizaci√≥n: ${previewUrl}`);
      }
      
      return {
        success: true,
        jobId: info.messageId,
        previewUrl
      };
    } catch (error) {
      console.error('‚ùå Error al enviar email de Cookie21:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      logger.error(`Error al enviar email de Cookie21: ${error.message}`, error);
      return {
        success: false,
        error: error.message,
        details: {
          name: error.name,
          code: error.code,
          command: error.command,
          responseCode: error.responseCode,
          response: error.response
        }
      };
    }
  }

  /**
   * Env√≠a un email de configuraci√≥n de cookies con el estilo de Cookie21
   * @param {Object} options - Opciones del email
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async sendCookieConfigEmail(options) {
    console.log('üìß Enviando email de configuraci√≥n de cookies...');
    console.log('  Destinatario:', options.email);
    console.log('  Sitio web:', options.website);
    
    try {
      const { email, name, website, configUrl, clientName = 'Cookie21' } = options;
      
      if (!email || !name || !website) {
        console.error('‚ùå Faltan campos requeridos para el email de configuraci√≥n de cookies');
        logger.error('Faltan campos requeridos para el email de configuraci√≥n de cookies');
        return {
          success: false,
          error: 'Faltan campos requeridos'
        };
      }
      
      // URL base para im√°genes y enlaces
      const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
      const cookieConfigUrl = configUrl || `${baseUrl}/panel/configuracion-cookies`;
      console.log('  URL de configuraci√≥n:', cookieConfigUrl);
      
      // Contenido del email con estilo Cookie21
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Configuraci√≥n de Cookies para ${website}</title>
          <style>
            body, html { 
              margin: 0;
              padding: 0;
              font-family: Arial, sans-serif;
              color: #333;
              line-height: 1.5;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
              background-color: #f9f9f9;
            }
            .header {
              text-align: center;
              padding: 20px 0;
              border-bottom: 1px solid #eaeaea;
              margin-bottom: 30px;
            }
            .header img {
              max-height: 60px;
              width: auto;
            }
            .content {
              padding: 20px;
              background: white;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            }
            h1 {
              color: #2c5282;
              margin-top: 0;
              font-size: 24px;
            }
            .info-box {
              background-color: #ebf8ff;
              border-left: 4px solid #3182ce;
              padding: 15px;
              margin: 20px 0;
              border-radius: 0 4px 4px 0;
            }
            .button {
              display: inline-block;
              padding: 12px 24px;
              background-color: #2c5282;
              color: white !important;
              text-decoration: none;
              border-radius: 4px;
              font-weight: bold;
              margin: 20px 0;
              text-align: center;
            }
            .footer {
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #eaeaea;
              color: #666;
              font-size: 12px;
              text-align: center;
            }
            .social-links {
              margin: 15px 0;
            }
            .social-links a {
              display: inline-block;
              margin: 0 5px;
            }
            .contact-info {
              margin-top: 15px;
            }
            .cookie-types {
              margin: 20px 0;
            }
            .cookie-type {
              margin-bottom: 15px;
            }
            .cookie-type h3 {
              color: #2c5282;
              margin-bottom: 5px;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="${process.env.BACKEND_URL || 'https://api.cookie21.com'}/emails/logoO.png" alt="Cookie21 Logo">
            </div>
            
            <div class="content">
              <h1>Configuraci√≥n de Cookies para ${website}</h1>
              <p>Hola ${name},</p>
              <p>Te compartimos la informaci√≥n sobre la configuraci√≥n de cookies para tu sitio web.</p>
              
              <div class="info-box">
                <p><strong>Importante:</strong> Recuerda que es necesario cumplir con la nueva Gu√≠a 2023 sobre el uso de las cookies de la Agencia Espa√±ola. Estos criterios deben implementarse antes de enero de 2024.</p>
              </div>
              
              <div class="cookie-types">
                <div class="cookie-type">
                  <h3>Cookies T√©cnicas Necesarias</h3>
                  <p>Estas cookies son imprescindibles para el funcionamiento de tu sitio web.</p>
                </div>
                
                <div class="cookie-type">
                  <h3>Cookies de An√°lisis o Medici√≥n</h3>
                  <p>Para la mejora continua de tu p√°gina web. Puedes activarlas o desactivarlas.</p>
                </div>
                
                <div class="cookie-type">
                  <h3>Cookies de Marketing o Publicidad</h3>
                  <p>Para mejorar la gesti√≥n de la publicidad mostrada en tu sitio web.</p>
                </div>
              </div>
              
              <p>Para realizar la configuraci√≥n completa de las cookies en tu sitio web, haz clic en el siguiente bot√≥n:</p>
              
              <div style="text-align: center;">
                <a href="${cookieConfigUrl}" class="button">CUMPLIR NORMATIVA</a>
              </div>
              
              <p>Si tienes alguna pregunta o necesitas asistencia, no dudes en contactarnos.</p>
              <p>Saludos,<br>El equipo de ${clientName}</p>
            </div>
            
            <div class="footer">
              <div class="social-links">
                <a href="https://twitter.com/cookie21es" target="_blank">Twitter</a> | 
                <a href="https://www.linkedin.com/company/cookie21" target="_blank">LinkedIn</a> |
                <a href="https://www.facebook.com/cookie21es" target="_blank">Facebook</a>
              </div>
              
              <div class="contact-info">
                <p>&copy; ${new Date().getFullYear()} Cookies 21. Todos los derechos reservados.</p>
                <p>
                  <a href="${baseUrl}/politica-privacidad">Pol√≠tica de Privacidad</a> | 
                  <a href="${baseUrl}/aviso-legal">Aviso Legal</a> |
                  <a href="${baseUrl}/contacto">Contacto</a>
                </p>
              </div>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Versi√≥n de texto plano
      const textContent = `
        Configuraci√≥n de Cookies para ${website}
        
        Hola ${name},
        
        Te compartimos la informaci√≥n sobre la configuraci√≥n de cookies para tu sitio web.
        
        IMPORTANTE: Recuerda que es necesario cumplir con la nueva Gu√≠a 2023 sobre el uso de las cookies de la Agencia Espa√±ola. Estos criterios deben implementarse antes de enero de 2024.
        
        Tipos de cookies:
        
        - Cookies T√©cnicas Necesarias: Estas cookies son imprescindibles para el funcionamiento de tu sitio web.
        
        - Cookies de An√°lisis o Medici√≥n: Para la mejora continua de tu p√°gina web. Puedes activarlas o desactivarlas.
        
        - Cookies de Marketing o Publicidad: Para mejorar la gesti√≥n de la publicidad mostrada en tu sitio web.
        
        Para realizar la configuraci√≥n completa de las cookies en tu sitio web, visita: ${cookieConfigUrl}
        
        Si tienes alguna pregunta o necesitas asistencia, no dudes en contactarnos.
        
        Saludos,
        El equipo de ${clientName}
        
        ¬© ${new Date().getFullYear()} ${clientName}. Todos los derechos reservados.
      `;
      
      // Si el transporter es null en desarrollo, simular el env√≠o
      if (this.isDev && !this.transporter) {
        console.log('üß™ SIMULACI√ìN DE EMAIL CONFIGURACI√ìN COOKIES');
        console.log(`  Para: ${email}`);
        console.log(`  Asunto: Configuraci√≥n de Cookies para ${website}`);
        console.log(`  URL de configuraci√≥n: ${cookieConfigUrl}`);
        
        logger.info('=== SIMULACI√ìN DE EMAIL CONFIGURACI√ìN COOKIES ===');
        logger.info(`Para: ${email}`);
        logger.info(`Asunto: Configuraci√≥n de Cookies para ${website}`);
        logger.info(`URL de configuraci√≥n: ${cookieConfigUrl}`);
        logger.info('=== FIN DE SIMULACI√ìN ===');
        
        return {
          success: true,
          jobId: `simulated-${Date.now()}`,
          previewUrl: null,
          simulado: true
        };
      }
      
      // Inicializar transporter si no existe
      if (!this.transporter) {
        console.log('üîÑ Inicializando transporter para env√≠o...');
        await this._initializeTransporter();
      }
      
      // Verificar que tenemos un transporter
      if (!this.transporter) {
        console.error('‚ùå No se pudo inicializar el transporter');
        return {
          success: false,
          error: 'No se pudo inicializar el transporter de email'
        };
      }
      
      // Preparar opciones del email
      const fromEmail = process.env.EMAIL_FROM || `"${clientName}" <noreply@cookie21.com>`;
      console.log('  Remitente:', fromEmail);
      
      // Enviar el email
      console.log('üîÑ Enviando email...');
      const info = await this.transporter.sendMail({
        from: fromEmail,
        to: email,
        subject: `Configuraci√≥n de Cookies para ${website}`,
        html: htmlContent,
        text: textContent
      });
      
      console.log('‚úÖ Email enviado correctamente');
      console.log('  ID del mensaje:', info.messageId);
      console.log('  Respuesta:', info.response);
      
      logger.info(`Email de configuraci√≥n de cookies enviado a ${email}`);
      
      // Si estamos en desarrollo con Ethereal, mostrar URL de previsualizaci√≥n
      const previewUrl = this.isDev && process.env.USE_ETHEREAL === 'true' ? nodemailer.getTestMessageUrl(info) : null;
      if (previewUrl) {
        console.log('  Previsualizaci√≥n:', previewUrl);
        logger.info(`Previsualizaci√≥n: ${previewUrl}`);
      }
      
      return {
        success: true,
        jobId: info.messageId,
        previewUrl
      };
    } catch (error) {
      console.error('‚ùå Error al enviar email de configuraci√≥n de cookies:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      logger.error(`Error al enviar email de configuraci√≥n de cookies: ${error.message}`, error);
      return {
        success: false,
        error: error.message,
        details: {
          name: error.name,
          code: error.code,
          command: error.command,
          responseCode: error.responseCode,
          response: error.response
        }
      };
    }
  }
  
  /**
   * Env√≠a un email con el script de embed para un dominio
   * @param {Object} options - Opciones del email
   * @returns {Promise<Object>} - Resultado de la operaci√≥n
   */
  async sendEmbedScriptEmail(options) {
    console.log('üìß Enviando email con script de embed...');
    console.log('  Destinatario:', options.email);
    console.log('  Dominio:', options.domain);
    
    try {
      const { 
        email, 
        name, 
        domain, 
        script, 
        clientName = 'Cookie21',
        invitationInfo = null, // Informaci√≥n opcional de invitaci√≥n si se combina
        sendDirect = false 
      } = options;
      
      if (!email || !name || !domain || !script) {
        console.error('‚ùå Faltan campos requeridos para el email de script embed');
        logger.error('Faltan campos requeridos para el email de script embed');
        return {
          success: false,
          error: 'Faltan campos requeridos'
        };
      }
      
      // URL base para im√°genes y enlaces
      const baseUrl = process.env.FRONTEND_URL || 'http://localhost:5173';
      const docsUrl = `${baseUrl}/documentation`;
      
      // Contenido espec√≠fico para invitaci√≥n si est√° incluida
      let invitationSection = '';
      if (invitationInfo && invitationInfo.token && invitationInfo.url) {
        invitationSection = `
          <div style="margin: 30px 0; padding: 20px; border: 1px solid #e2e8f0; border-radius: 8px; background-color: #f8fafc;">
            <h3 style="color: #2c5282; margin-top: 0;">‚ú® Invitaci√≥n a Cookies21</h3>
            <p>Has sido invitado a unirte a la plataforma Cookies21 como administrador del cliente ${clientName}.</p>
            <p>Para completar tu registro, haz clic en el siguiente bot√≥n:</p>
            <div style="text-align: center; margin: 20px 0;">
              <a href="${invitationInfo.url}" style="display: inline-block; background-color: #2c5282; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">Completar registro</a>
            </div>
            <p style="font-size: 0.9em; color: #64748b;">Este enlace expirar√° en 7 d√≠as.</p>
          </div>
        `;
      }
      
      // Contenido del email con script embebible
      const htmlContent = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Script de Consentimiento de Cookies para ${domain}</title>
          <style>
            body, html { 
              margin: 0;
              padding: 0;
              font-family: Arial, sans-serif;
              color: #333;
              line-height: 1.5;
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
              padding: 20px;
              background-color: #f9f9f9;
            }
            .header {
              text-align: center;
              padding: 20px 0;
              border-bottom: 1px solid #eaeaea;
              margin-bottom: 30px;
            }
            .header img {
              max-height: 60px;
              width: auto;
            }
            .content {
              padding: 20px;
              background: white;
              border-radius: 8px;
              box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            }
            h1 {
              color: #2c5282;
              margin-top: 0;
              font-size: 24px;
            }
            h2 {
              color: #2c5282;
              font-size: 20px;
              margin-top: 30px;
            }
            .button {
              display: inline-block;
              padding: 12px 24px;
              background-color: #2c5282;
              color: white !important;
              text-decoration: none;
              border-radius: 4px;
              font-weight: bold;
              margin: 20px 0;
              text-align: center;
            }
            .footer {
              margin-top: 30px;
              padding-top: 20px;
              border-top: 1px solid #eaeaea;
              color: #666;
              font-size: 12px;
              text-align: center;
            }
            .social-links {
              margin: 15px 0;
            }
            .social-links a {
              display: inline-block;
              margin: 0 5px;
            }
            .contact-info {
              margin-top: 15px;
            }
            .code-block {
              background-color: #f1f5f9;
              border: 1px solid #e2e8f0;
              border-radius: 6px;
              padding: 15px;
              overflow-x: auto;
              font-family: monospace;
              font-size: 14px;
              line-height: 1.5;
              margin: 20px 0;
            }
            .tip-box {
              background-color: #ebf8ff;
              border-left: 4px solid #3182ce;
              padding: 15px;
              margin: 20px 0;
              border-radius: 0 4px 4px 0;
            }
            .important-notice {
              background-color: #fff5f5;
              border-left: 4px solid #e53e3e;
              padding: 15px;
              margin: 20px 0;
              border-radius: 0 4px 4px 0;
            }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <img src="${process.env.BACKEND_URL || 'https://api.cookie21.com'}/emails/logoO.png" alt="Cookie21 Logo">
            </div>
            
            <div class="content">
              <h1>Script de Consentimiento de Cookies para ${domain}</h1>
              <p>Hola ${name},</p>
              <p>Te compartimos el script de consentimiento de cookies para tu sitio web <strong>${domain}</strong>. Este script debe instalarse en todas las p√°ginas de tu sitio web para cumplir con la normativa vigente sobre cookies.</p>
              
              ${invitationSection}
              
              <h2>üìã C√≥digo para insertar</h2>
              <p>A√±ade el siguiente c√≥digo justo antes del cierre de la etiqueta <code>&lt;/head&gt;</code> en todas las p√°ginas de tu sitio web:</p>
              
              <div class="code-block">${script.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div>
              
              <div class="tip-box">
                <p><strong>Consejo:</strong> Si tu sitio web utiliza un sistema de gesti√≥n de contenidos (CMS) como WordPress, puedes a√±adir este c√≥digo en la configuraci√≥n del tema o mediante un plugin espec√≠fico para scripts en el header.</p>
              </div>
              
              <div class="important-notice">
                <p><strong>Importante:</strong> Recuerda que este script debe estar presente en todas las p√°ginas de tu sitio web para asegurar el cumplimiento normativo. La ausencia del script en alguna p√°gina podr√≠a resultar en incumplimiento de la normativa.</p>
              </div>
              
              <h2>üîé Verificaci√≥n</h2>
              <p>Una vez instalado el script, puedes verificar su correcto funcionamiento visitando tu sitio web. Deber√≠as ver aparecer el banner de consentimiento de cookies en tu primera visita.</p>
              
              <h2>üìö Documentaci√≥n</h2>
              <p>Para m√°s informaci√≥n sobre la configuraci√≥n y personalizaci√≥n del banner, consulta nuestra documentaci√≥n:</p>
              
              <div style="text-align: center;">
                <a href="${docsUrl}" class="button">Ver documentaci√≥n</a>
              </div>
              
              <p>Si tienes alguna pregunta o necesitas asistencia, no dudes en contactarnos.</p>
              <p>Saludos cordiales,<br>De parte del equipo de Cookies 21</p>
            </div>
            
            <div class="footer">
              <div class="social-links">
                <a href="https://twitter.com/cookie21es" target="_blank">Twitter</a> | 
                <a href="https://www.linkedin.com/company/cookie21" target="_blank">LinkedIn</a> |
                <a href="https://www.facebook.com/cookie21es" target="_blank">Facebook</a>
              </div>
              
              <div class="contact-info">
                <p>&copy; ${new Date().getFullYear()} Cookies 21. Todos los derechos reservados.</p>
                <p>
                  <a href="${baseUrl}/politica-privacidad">Pol√≠tica de Privacidad</a> | 
                  <a href="${baseUrl}/aviso-legal">Aviso Legal</a> |
                  <a href="${baseUrl}/contacto">Contacto</a>
                </p>
              </div>
            </div>
          </div>
        </body>
        </html>
      `;
      
      // Versi√≥n de texto plano
      const textContent = `
        Script de Consentimiento de Cookies para ${domain}
        
        Hola ${name},
        
        Te compartimos el script de consentimiento de cookies para tu sitio web ${domain}. Este script debe instalarse en todas las p√°ginas de tu sitio web para cumplir con la normativa vigente sobre cookies.
        
        ${invitationInfo ? `
        ‚ú® INVITACI√ìN A COOKIES21
        
        Has sido invitado a unirte a la plataforma Cookies21 como administrador del cliente ${clientName}.
        
        Para completar tu registro, visita el siguiente enlace:
        ${invitationInfo.url}
        
        Este enlace expirar√° en 7 d√≠as.
        ` : ''}
        
        C√ìDIGO PARA INSERTAR
        
        A√±ade el siguiente c√≥digo justo antes del cierre de la etiqueta </head> en todas las p√°ginas de tu sitio web:
        
        ${script}
        
        IMPORTANTE: Recuerda que este script debe estar presente en todas las p√°ginas de tu sitio web para asegurar el cumplimiento normativo.
        
        VERIFICACI√ìN
        
        Una vez instalado el script, puedes verificar su correcto funcionamiento visitando tu sitio web. Deber√≠as ver aparecer el banner de consentimiento de cookies en tu primera visita.
        
        DOCUMENTACI√ìN
        
        Para m√°s informaci√≥n sobre la configuraci√≥n y personalizaci√≥n del banner, consulta nuestra documentaci√≥n:
        ${docsUrl}
        
        Si tienes alguna pregunta o necesitas asistencia, no dudes en contactarnos.
        
        Saludos,
        El equipo de ${clientName}
        
        ¬© ${new Date().getFullYear()} ${clientName}. Todos los derechos reservados.
      `;
      
      // Si el transporter es null en desarrollo, simular el env√≠o
      if (this.isDev && !this.transporter && !sendDirect) {
        console.log('üß™ SIMULACI√ìN DE EMAIL CON SCRIPT DE EMBED');
        console.log(`  Para: ${email}`);
        console.log(`  Asunto: Script de Consentimiento de Cookies para ${domain}`);
        console.log(`  Dominio: ${domain}`);
        
        logger.info('=== SIMULACI√ìN DE EMAIL CON SCRIPT EMBED ===');
        logger.info(`Para: ${email}`);
        logger.info(`Asunto: Script de Consentimiento de Cookies para ${domain}`);
        logger.info(`Dominio: ${domain}`);
        logger.info(`Invitaci√≥n incluida: ${invitationInfo ? 'S√≠' : 'No'}`);
        logger.info('=== FIN DE SIMULACI√ìN ===');
        
        return {
          success: true,
          jobId: `simulated-${Date.now()}`,
          previewUrl: null,
          simulado: true
        };
      }
      
      // Inicializar transporter si no existe
      if (!this.transporter || sendDirect) {
        console.log('üîÑ Inicializando transporter para env√≠o...');
        await this._initializeTransporter();
      }
      
      // Verificar que tenemos un transporter
      if (!this.transporter) {
        console.error('‚ùå No se pudo inicializar el transporter');
        return {
          success: false,
          error: 'No se pudo inicializar el transporter de email'
        };
      }
      
      // Preparar opciones del email
      const fromEmail = process.env.EMAIL_FROM || `"${clientName}" <noreply@cookie21.com>`;
      console.log('  Remitente:', fromEmail);
      
      // Enviar el email
      console.log('üîÑ Enviando email...');
      const info = await this.transporter.sendMail({
        from: fromEmail,
        to: email,
        subject: `Script de Consentimiento de Cookies para ${domain}`,
        html: htmlContent,
        text: textContent
      });
      
      console.log('‚úÖ Email enviado correctamente');
      console.log('  ID del mensaje:', info.messageId);
      console.log('  Respuesta:', info.response);
      
      logger.info(`Email con script embed enviado a ${email} para dominio ${domain}`);
      
      // Si estamos en desarrollo con Ethereal, mostrar URL de previsualizaci√≥n
      const previewUrl = this.isDev && process.env.USE_ETHEREAL === 'true' ? nodemailer.getTestMessageUrl(info) : null;
      if (previewUrl) {
        console.log('  Previsualizaci√≥n:', previewUrl);
        logger.info(`Previsualizaci√≥n: ${previewUrl}`);
      }
      
      return {
        success: true,
        jobId: info.messageId,
        previewUrl,
        combined: !!invitationInfo // Indicar si fue un correo combinado
      };
    } catch (error) {
      console.error('‚ùå Error al enviar email con script embed:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      logger.error(`Error al enviar email con script embed: ${error.message}`, error);
      return {
        success: false,
        error: error.message,
        details: {
          name: error.name,
          code: error.code,
          command: error.command,
          responseCode: error.responseCode,
          response: error.response
        }
      };
    }
  }

  /**
   * Realiza un test de conexi√≥n y env√≠o de email
   * @returns {Promise<Object>} - Resultado del test
   */
  async testConnection() {
    console.log('üîÑ Realizando test de conexi√≥n SMTP...');
    
    try {
      // Mostrar configuraci√≥n
      console.log('Configuraci√≥n actual:');
      console.log(`  HOST: ${process.env.EMAIL_HOST}`);
      console.log(`  PORT: ${process.env.EMAIL_PORT}`);
      console.log(`  USER: ${process.env.EMAIL_USER}`);
      console.log(`  FROM: ${process.env.EMAIL_FROM}`);
      console.log(`  PASS: ${process.env.EMAIL_PASS ? '[CONFIGURADO]' : '[NO CONFIGURADO]'}`);
      
      // Reinicializar el transporter (forzar nueva conexi√≥n)
      this.transporter = null;
      await this._initializeTransporter();
      
      if (!this.transporter) {
        return {
          success: false,
          error: 'No se pudo inicializar el transporter',
          stage: 'init'
        };
      }
      
      // Verificar la conexi√≥n
      console.log('üîÑ Verificando conexi√≥n SMTP...');
      const verifyResult = await this.transporter.verify();
      console.log('‚úÖ Conexi√≥n verificada:', verifyResult);
      
      // Enviar email de prueba
      const testEmail = process.env.TEST_EMAIL || process.env.EMAIL_USER;
      if (!testEmail) {
        return {
          success: true,
          connectionOk: true,
          message: 'Conexi√≥n SMTP verificada correctamente, pero no se envi√≥ email de prueba (falta TEST_EMAIL)'
        };
      }
      
      console.log(`üîÑ Enviando email de prueba a ${testEmail}...`);
      const info = await this.transporter.sendMail({
        from: process.env.EMAIL_FROM || `"Test" <${process.env.EMAIL_USER}>`,
        to: testEmail,
        subject: `Test de conexi√≥n SMTP - ${new Date().toISOString()}`,
        text: `Este es un email de prueba enviado el ${new Date().toLocaleString()}.
        
Configuraci√≥n:
- HOST: ${process.env.EMAIL_HOST}
- PORT: ${process.env.EMAIL_PORT}
- USER: ${process.env.EMAIL_USER}
- FROM: ${process.env.EMAIL_FROM}

Si est√°s recibiendo este email, la configuraci√≥n SMTP est√° funcionando correctamente.`
      });
      
      console.log('‚úÖ Email de prueba enviado correctamente');
      console.log('  ID del mensaje:', info.messageId);
      console.log('  Respuesta:', info.response);
      
      return {
        success: true,
        connectionOk: true,
        emailSent: true,
        messageId: info.messageId,
        response: info.response
      };
      
    } catch (error) {
      console.error('‚ùå Error en test de conexi√≥n:', error);
      console.error('Detalles del error:', {
        name: error.name,
        message: error.message,
        code: error.code,
        command: error.command,
        responseCode: error.responseCode,
        response: error.response
      });
      
      return {
        success: false,
        error: error.message,
        details: {
          name: error.name,
          code: error.code,
          command: error.command,
          responseCode: error.responseCode,
          response: error.response
        }
      };
    }
  }

  /**
   * Env√≠a notificaci√≥n a owners sobre nueva solicitud de renovaci√≥n
   */
  async sendRenewalRequestNotification(data) {
    const { to, ownerName, clientName, clientEmail, requestType, urgency, message, requestedBy, requestId } = data;
    
    const urgencyText = {
      low: 'Baja',
      medium: 'Media', 
      high: 'Alta'
    };
    
    const requestTypeText = {
      renewal: 'Renovaci√≥n de Suscripci√≥n',
      reactivation: 'Reactivaci√≥n de Suscripci√≥n',
      upgrade: 'Actualizaci√≥n de Plan',
      support: 'Soporte T√©cnico'
    };
    
    const urgencyColor = {
      low: '#22C55E',
      medium: '#F59E0B',
      high: '#EF4444'
    };

    const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Nueva Solicitud de ${requestTypeText[requestType]}</title>
      <style>
        ${this._getEmailStyles()}
        .urgency-badge {
          display: inline-block;
          padding: 4px 12px;
          border-radius: 20px;
          font-size: 12px;
          font-weight: 600;
          color: white;
          background-color: ${urgencyColor[urgency]};
        }
        .request-details {
          background-color: #f8fafc;
          border-left: 4px solid #235C88;
          padding: 20px;
          margin: 20px 0;
          border-radius: 0 8px 8px 0;
        }
      </style>
    </head>
    <body>
      <div class="email-container">
        <div class="content">
          <h1>üîî Nueva Solicitud Recibida</h1>
          
          <p>Hola <strong>${ownerName}</strong>,</p>
          
          <p>Se ha recibido una nueva solicitud de <strong>${requestTypeText[requestType]}</strong> que requiere tu atenci√≥n.</p>
          
          <div class="request-details">
            <h3 style="margin-top: 0; color: #235C88;">üìã Detalles de la Solicitud</h3>
            <p><strong>Cliente:</strong> ${clientName}</p>
            <p><strong>Email:</strong> ${clientEmail}</p>
            <p><strong>Solicitado por:</strong> ${requestedBy}</p>
            <p><strong>Tipo:</strong> ${requestTypeText[requestType]}</p>
            <p><strong>Urgencia:</strong> <span class="urgency-badge">${urgencyText[urgency]}</span></p>
            <p><strong>Mensaje:</strong></p>
            <div style="background: white; padding: 15px; border-radius: 6px; font-style: italic; border-left: 3px solid #235C88;">
              "${message}"
            </div>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.CLIENT_URL}/dashboard/renewal-requests" class="button">
              üöÄ Ver en Dashboard
            </a>
          </div>
          
          <p style="font-size: 14px; color: #6B7280; border-top: 1px solid #E5E7EB; padding-top: 20px;">
            <strong>ID de solicitud:</strong> ${requestId}<br>
            <strong>Recibida:</strong> ${new Date().toLocaleString('es-ES')}
          </p>
          
          <p style="font-size: 12px; color: #9CA3AF;">
            Este email se envi√≥ autom√°ticamente desde el sistema de gesti√≥n de suscripciones de Cookies21.
          </p>
        </div>
      </div>
    </body>
    </html>`;

    return this.sendEmail({
      to,
      subject: `üîî Nueva ${requestTypeText[requestType]} - ${clientName}`,
      html
    });
  }

  /**
   * Env√≠a notificaci√≥n al cliente sobre cambio de estado de su solicitud
   */
  async sendRenewalStatusUpdate(data) {
    const { to, clientName, requestType, newStatus, adminNotes, requestId } = data;
    
    const statusText = {
      pending: 'Pendiente',
      in_progress: 'En Proceso',
      completed: 'Completada',
      rejected: 'Rechazada'
    };
    
    const statusColor = {
      pending: '#F59E0B',
      in_progress: '#3B82F6',
      completed: '#22C55E',
      rejected: '#EF4444'
    };
    
    const requestTypeText = {
      renewal: 'Renovaci√≥n de Suscripci√≥n',
      reactivation: 'Reactivaci√≥n de Suscripci√≥n',
      upgrade: 'Actualizaci√≥n de Plan',
      support: 'Soporte T√©cnico'
    };

    let statusMessage = '';
    let nextSteps = '';
    
    switch (newStatus) {
      case 'in_progress':
        statusMessage = 'Nuestro equipo est√° revisando tu solicitud y se contactar√° contigo pronto.';
        nextSteps = 'Te notificaremos por email cuando tengamos una actualizaci√≥n.';
        break;
      case 'completed':
        statusMessage = 'Tu solicitud ha sido procesada exitosamente.';
        nextSteps = 'Revisa tu panel de control para ver los cambios aplicados.';
        break;
      case 'rejected':
        statusMessage = 'Lamentablemente, no pudimos procesar tu solicitud en este momento.';
        nextSteps = 'Puedes contactar a nuestro equipo de soporte para m√°s informaci√≥n.';
        break;
      default:
        statusMessage = 'El estado de tu solicitud ha sido actualizado.';
        nextSteps = 'Te mantendremos informado sobre cualquier cambio.';
    }

    const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Actualizaci√≥n de tu Solicitud</title>
      <style>
        ${this._getEmailStyles()}
        .status-badge {
          display: inline-block;
          padding: 6px 16px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
          color: white;
          background-color: ${statusColor[newStatus]};
        }
        .status-update {
          background-color: #f8fafc;
          border: 2px solid ${statusColor[newStatus]};
          padding: 25px;
          margin: 25px 0;
          border-radius: 12px;
          text-align: center;
        }
      </style>
    </head>
    <body>
      <div class="email-container">
        <div class="content">
          <h1>üì± Actualizaci√≥n de Solicitud</h1>
          
          <p>Estimado cliente de <strong>${clientName}</strong>,</p>
          
          <p>Te escribimos para informarte sobre una actualizaci√≥n en tu solicitud de <strong>${requestTypeText[requestType]}</strong>.</p>
          
          <div class="status-update">
            <h3 style="margin-top: 0;">Estado Actual</h3>
            <span class="status-badge">${statusText[newStatus]}</span>
            <p style="margin: 15px 0 5px 0; font-size: 16px;">${statusMessage}</p>
          </div>
          
          ${adminNotes ? `
          <div style="background: #FEF3C7; border-left: 4px solid #F59E0B; padding: 20px; margin: 20px 0; border-radius: 0 8px 8px 0;">
            <h4 style="margin-top: 0; color: #92400E;">üí¨ Nota del Equipo:</h4>
            <p style="margin-bottom: 0; color: #92400E;">${adminNotes}</p>
          </div>
          ` : ''}
          
          <div style="background: #E0F2FE; padding: 20px; border-radius: 8px; margin: 25px 0;">
            <h4 style="margin-top: 0; color: #0C4A6E;">üîÑ Pr√≥ximos Pasos:</h4>
            <p style="margin-bottom: 0; color: #0C4A6E;">${nextSteps}</p>
          </div>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.CLIENT_URL}/dashboard" class="button">
              üìä Ir al Dashboard
            </a>
          </div>
          
          <p style="font-size: 14px; color: #6B7280; border-top: 1px solid #E5E7EB; padding-top: 20px;">
            <strong>Solicitud:</strong> ${requestTypeText[requestType]}<br>
            <strong>ID de referencia:</strong> ${requestId}<br>
            <strong>Actualizada:</strong> ${new Date().toLocaleString('es-ES')}
          </p>
          
          <p style="font-size: 12px; color: #9CA3AF;">
            Si tienes preguntas, puedes responder a este email o contactar a nuestro equipo de soporte.
          </p>
        </div>
      </div>
    </body>
    </html>`;

    return this.sendEmail({
      to,
      subject: `üì± Actualizaci√≥n: ${requestTypeText[requestType]} - ${statusText[newStatus]}`,
      html
    });
  }

  // M√©todo para enviar confirmaci√≥n de renovaci√≥n exitosa
  async sendRenewalSuccessNotification({ 
    to, 
    clientName, 
    planName, 
    endDate, 
    features = [],
    requestType = 'renewal' 
  }) {
    console.log(`üìß Enviando confirmaci√≥n de renovaci√≥n exitosa a: ${to}`);
    
    const typeMessages = {
      renewal: {
        title: '¬°Suscripci√≥n Renovada Exitosamente!',
        message: 'Tu suscripci√≥n ha sido renovada y ya puedes continuar disfrutando de todos nuestros servicios.',
        icon: 'üéâ'
      },
      reactivation: {
        title: '¬°Suscripci√≥n Reactivada!',
        message: 'Tu suscripci√≥n ha sido reactivada y ya tienes acceso completo a todos los servicios.',
        icon: '‚úÖ'
      },
      upgrade: {
        title: '¬°Plan Actualizado!',
        message: 'Tu plan ha sido actualizado exitosamente. Disfruta de las nuevas caracter√≠sticas.',
        icon: '‚¨ÜÔ∏è'
      }
    };

    const typeInfo = typeMessages[requestType] || typeMessages.renewal;
    const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
    const dashboardUrl = `${frontendUrl}/dashboard`;
    const formattedEndDate = new Date(endDate).toLocaleDateString('es-ES', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    const html = `
      <!DOCTYPE html>
      <html lang="es">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${typeInfo.title}</title>
        <style>
          body, html { 
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
            color: #1a202c;
            line-height: 1.6;
            background-color: #f7fafc;
          }
          .container {
            max-width: 600px;
            margin: 0 auto;
            background-color: #ffffff;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          }
          .header {
            background: linear-gradient(135deg, #10B981 0%, #059669 100%);
            padding: 40px 30px;
            text-align: center;
            color: white;
          }
          .header img {
            max-height: 60px;
            width: auto;
            display: block;
            margin: 0 auto 20px auto;
            filter: brightness(0) invert(1);
          }
          .success-icon {
            font-size: 48px;
            margin-bottom: 20px;
            display: block;
          }
          .success-title {
            font-size: 28px;
            font-weight: bold;
            margin: 0 0 10px 0;
            color: white;
          }
          .success-subtitle {
            font-size: 16px;
            margin: 0;
            opacity: 0.9;
            color: white;
          }
          .content {
            padding: 40px 30px;
          }
          .renewal-card {
            background: linear-gradient(135deg, #EFF6FF 0%, #DBEAFE 100%);
            border: 2px solid #3B82F6;
            border-radius: 12px;
            padding: 24px;
            margin: 24px 0;
            text-align: center;
          }
          .plan-name {
            font-size: 24px;
            font-weight: bold;
            color: #1E40AF;
            margin: 0 0 8px 0;
          }
          .plan-details {
            background: white;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            text-align: left;
          }
          .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 0;
            border-bottom: 1px solid #F3F4F6;
          }
          .detail-item:last-child {
            border-bottom: none;
          }
          .detail-label {
            font-weight: 600;
            color: #374151;
          }
          .detail-value {
            color: #10B981;
            font-weight: 600;
          }
          .features-list {
            background: #F9FAFB;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
          }
          .features-title {
            font-weight: bold;
            color: #374151;
            margin: 0 0 12px 0;
          }
          .feature-item {
            display: flex;
            align-items: center;
            margin: 8px 0;
            color: #6B7280;
          }
          .feature-check {
            color: #10B981;
            font-weight: bold;
            margin-right: 8px;
          }
          .cta-button {
            display: inline-block;
            background: linear-gradient(135deg, #235C88 0%, #1a4668 100%);
            color: white;
            text-decoration: none;
            padding: 16px 32px;
            border-radius: 8px;
            font-weight: bold;
            font-size: 16px;
            margin: 20px 0;
            transition: all 0.3s ease;
          }
          .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(35, 92, 136, 0.3);
          }
          .footer {
            background-color: #F9FAFB;
            padding: 30px;
            text-align: center;
            border-top: 1px solid #E5E7EB;
          }
          .footer-text {
            font-size: 14px;
            color: #6B7280;
            margin: 8px 0;
          }
          .brand-footer {
            background: linear-gradient(135deg, #235C88 0%, #1a4668 100%);
            color: white;
            padding: 20px;
            text-align: center;
            font-size: 14px;
          }
          @media (max-width: 600px) {
            .container {
              margin: 0;
              border-radius: 0;
            }
            .header, .content, .footer {
              padding: 20px;
            }
            .success-title {
              font-size: 24px;
            }
            .plan-name {
              font-size: 20px;
            }
          }
        </style>
      </head>
      <body>
        <div class="container">
          <!-- Header -->
          <div class="header">
            <img src="https://via.placeholder.com/200x60/FFFFFF/FFFFFF?text=COOKIE21" alt="Cookie21 Logo" />
            <div class="success-icon">${typeInfo.icon}</div>
            <h1 class="success-title">${typeInfo.title}</h1>
            <p class="success-subtitle">${typeInfo.message}</p>
          </div>

          <!-- Content -->
          <div class="content">
            <p style="font-size: 16px; color: #374151; margin: 0 0 20px 0;">
              Hola,
            </p>
            
            <p style="font-size: 16px; color: #374151; margin: 0 0 24px 0;">
              ¬°Excelentes noticias! Tu suscripci√≥n de <strong>${clientName}</strong> est√° activa y lista para usar.
            </p>

            <!-- Renewal Card -->
            <div class="renewal-card">
              <h2 class="plan-name">Plan ${planName}</h2>
              
              <div class="plan-details">
                <div class="detail-item">
                  <span class="detail-label">Estado:</span>
                  <span class="detail-value">‚úÖ Activo</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">V√°lido hasta:</span>
                  <span class="detail-value">${formattedEndDate}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Renovado el:</span>
                  <span class="detail-value">${new Date().toLocaleDateString('es-ES')}</span>
                </div>
              </div>

              ${features.length > 0 ? `
                <div class="features-list">
                  <h3 class="features-title">üöÄ Caracter√≠sticas incluidas:</h3>
                  ${features.map(feature => `
                    <div class="feature-item">
                      <span class="feature-check">‚úì</span>
                      <span>${feature}</span>
                    </div>
                  `).join('')}
                </div>
              ` : ''}
            </div>

            <div style="text-align: center; margin: 32px 0;">
              <a href="${dashboardUrl}" class="cta-button">
                üöÄ Acceder al Panel de Control
              </a>
            </div>

            <div style="background: #FEF3C7; border: 1px solid #F59E0B; border-radius: 8px; padding: 16px; margin: 24px 0;">
              <p style="margin: 0; color: #92400E; font-size: 14px;">
                <strong>üí° Consejo:</strong> Ahora puedes configurar nuevos dominios, crear banners personalizados y acceder a todas las herramientas de gesti√≥n de cookies y consentimiento.
              </p>
            </div>

            <p style="font-size: 16px; color: #374151; margin: 24px 0 0 0;">
              Gracias por confiar en Cookie21 para el cumplimiento de privacidad de tu sitio web.
            </p>
          </div>

          <!-- Footer -->
          <div class="footer">
            <p class="footer-text">
              ¬øNecesitas ayuda? Responde a este email o visita nuestro centro de ayuda.
            </p>
            <p class="footer-text">
              <strong>Equipo de Cookie21</strong>
            </p>
          </div>

          <!-- Brand Footer -->
          <div class="brand-footer">
            <p style="margin: 0;">
              <strong>Cookie21</strong> - Soluci√≥n completa de gesti√≥n de consentimiento y privacidad
            </p>
            <p style="margin: 8px 0 0 0; opacity: 0.8; font-size: 12px;">
              Cumplimiento GDPR ‚Ä¢ Gesti√≥n de Cookies ‚Ä¢ Banners Personalizables
            </p>
          </div>
        </div>
      </body>
      </html>`;

    return this.sendEmail({
      to,
      subject: `${typeInfo.icon} ${typeInfo.title} - ${clientName}`,
      html
    });
  }
}

module.exports = new EmailService();