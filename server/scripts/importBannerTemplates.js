#!/usr/bin/env node

/**
 * Script para importar banner templates desde archivos JSON exportados
 * Se ejecuta desde: server/scripts/importBannerTemplates.js
 * 
 * Uso:
 * cd server
 * node scripts/importBannerTemplates.js [opciones]
 * 
 * Opciones:
 * --file <ruta>    Archivo espec√≠fico a importar (por defecto: public/Exports/banner-templates-export.json)
 * --overwrite      Sobrescribir templates existentes por nombre
 * --dry-run        Simular importaci√≥n sin cambios reales
 * --system-only    Importar solo templates del sistema
 * --client-only    Importar solo templates de cliente
 */

const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Importar el modelo BannerTemplate
const BannerTemplate = require('../src/models/BannerTemplate');

// Configuraci√≥n por defecto
const DEFAULT_IMPORT_FILE = path.join(__dirname, '../../public/Exports/banner-templates-export.json');

function parseArguments() {
  const args = process.argv.slice(2);
  const options = {
    file: DEFAULT_IMPORT_FILE,
    overwrite: false,
    dryRun: false,
    systemOnly: false,
    clientOnly: false
  };

  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--file':
        options.file = args[++i];
        break;
      case '--overwrite':
        options.overwrite = true;
        break;
      case '--dry-run':
        options.dryRun = true;
        break;
      case '--system-only':
        options.systemOnly = true;
        break;
      case '--client-only':
        options.clientOnly = true;
        break;
      case '--help':
        console.log(`
Uso: node scripts/importBannerTemplates.js [opciones]

Opciones:
  --file <ruta>     Archivo espec√≠fico a importar
  --overwrite       Sobrescribir templates existentes por nombre
  --dry-run         Simular importaci√≥n sin cambios reales
  --system-only     Importar solo templates del sistema
  --client-only     Importar solo templates de cliente
  --help            Mostrar esta ayuda
        `);
        process.exit(0);
        break;
    }
  }

  return options;
}

async function importBannerTemplates(options) {
  try {
    console.log('üöÄ Iniciando importaci√≥n de banner templates...');
    console.log('‚öôÔ∏è Opciones:', {
      file: options.file,
      overwrite: options.overwrite,
      dryRun: options.dryRun,
      systemOnly: options.systemOnly,
      clientOnly: options.clientOnly
    });

    // Verificar que el archivo existe
    if (!fs.existsSync(options.file)) {
      throw new Error(`Archivo no encontrado: ${options.file}`);
    }

    // Leer archivo de exportaci√≥n
    console.log('üìÑ Leyendo archivo de exportaci√≥n...');
    const fileContent = fs.readFileSync(options.file, 'utf8');
    const importData = JSON.parse(fileContent);

    console.log('üìä Informaci√≥n de exportaci√≥n:');
    console.log(`   Timestamp: ${importData.exportInfo?.timestamp}`);
    console.log(`   Total templates: ${importData.exportInfo?.totalTemplates}`);
    console.log(`   Versi√≥n: ${importData.exportInfo?.version}`);

    if (!importData.templates || !Array.isArray(importData.templates)) {
      throw new Error('Formato de archivo inv√°lido: no se encontraron templates');
    }

    // Filtrar templates seg√∫n opciones
    let templatesToImport = importData.templates;
    
    if (options.systemOnly) {
      templatesToImport = templatesToImport.filter(t => t.type === 'system');
      console.log(`üîß Filtrando solo templates del sistema: ${templatesToImport.length}`);
    }
    
    if (options.clientOnly) {
      templatesToImport = templatesToImport.filter(t => t.type === 'client');
      console.log(`üë§ Filtrando solo templates de cliente: ${templatesToImport.length}`);
    }

    if (templatesToImport.length === 0) {
      console.log('‚ö†Ô∏è No hay templates para importar despu√©s del filtrado');
      process.exit(0);
    }

    // Conectar a MongoDB si no es dry-run
    if (!options.dryRun) {
      console.log('üì° Conectando a MongoDB...');
      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/cookies21');
      console.log('‚úÖ Conectado a MongoDB');
    }

    // Procesar cada template
    const results = {
      imported: 0,
      skipped: 0,
      updated: 0,
      errors: 0,
      errorDetails: []
    };

    console.log(`\nüîÑ Procesando ${templatesToImport.length} templates...`);

    for (const templateData of templatesToImport) {
      try {
        const templateName = templateData.name;
        console.log(`\nüìù Procesando: "${templateName}"`);

        if (!options.dryRun) {
          // Verificar si ya existe un template con el mismo nombre
          const existingTemplate = await BannerTemplate.findOne({ name: templateName });

          if (existingTemplate && !options.overwrite) {
            console.log(`   ‚è≠Ô∏è Saltando - ya existe (use --overwrite para sobrescribir)`);
            results.skipped++;
            continue;
          }

          // Preparar datos para importaci√≥n
          const templateToSave = {
            name: templateData.name,
            description: templateData.description,
            type: templateData.type,
            status: templateData.status,
            layout: templateData.layout,
            components: templateData.components,
            theme: templateData.theme,
            metadata: templateData.metadata,
            tags: templateData.tags,
            category: templateData.category,
            // No importar clientId para evitar conflictos
            clientId: templateData.type === 'system' ? null : undefined
          };

          if (existingTemplate && options.overwrite) {
            // Actualizar template existente
            await BannerTemplate.findByIdAndUpdate(existingTemplate._id, templateToSave);
            console.log(`   ‚úÖ Actualizado existosamente`);
            results.updated++;
          } else {
            // Crear nuevo template
            const newTemplate = new BannerTemplate(templateToSave);
            await newTemplate.save();
            console.log(`   ‚úÖ Importado exitosamente`);
            results.imported++;
          }
        } else {
          // Modo dry-run
          console.log(`   üîç [DRY-RUN] Se importar√≠a como nuevo template`);
          results.imported++;
        }

      } catch (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
        results.errors++;
        results.errorDetails.push({
          template: templateData.name,
          error: error.message
        });
      }
    }

    // Mostrar resumen
    console.log('\nüìà Resumen de importaci√≥n:');
    console.log(`   ‚úÖ Importados: ${results.imported}`);
    console.log(`   üîÑ Actualizados: ${results.updated}`);
    console.log(`   ‚è≠Ô∏è Saltados: ${results.skipped}`);
    console.log(`   ‚ùå Errores: ${results.errors}`);

    if (results.errors > 0) {
      console.log('\nüö® Detalles de errores:');
      results.errorDetails.forEach(detail => {
        console.log(`   ‚Ä¢ ${detail.template}: ${detail.error}`);
      });
    }

    if (options.dryRun) {
      console.log('\nüîç MODO DRY-RUN: No se realizaron cambios reales');
    }

    console.log('\n‚úÖ Importaci√≥n completada');

  } catch (error) {
    console.error('‚ùå Error durante la importaci√≥n:', error);
    process.exit(1);
  } finally {
    // Cerrar conexi√≥n si no es dry-run
    if (!options.dryRun && mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('üîå Conexi√≥n cerrada');
    }
    process.exit(0);
  }
}

// Ejecutar script si se llama directamente
if (require.main === module) {
  const options = parseArguments();
  importBannerTemplates(options).catch(error => {
    console.error('üí• Error fatal:', error);
    process.exit(1);
  });
}

module.exports = { importBannerTemplates };