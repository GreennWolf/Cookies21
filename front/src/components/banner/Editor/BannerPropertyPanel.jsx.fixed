import React, { useState, useEffect, useCallback } from 'react';
import { Palette, Type, Box, Move, X, RefreshCw, AlignCenter, AlignHorizontalJustifyCenter, AlignVerticalJustifyCenter, ArrowDown, ArrowUp, ArrowLeft, ArrowRight, CornerDownLeft, CornerDownRight, CornerUpLeft, CornerUpRight } from 'lucide-react';
import ComponentSizeInfo from './ComponentSizeInfo';
import PositionUtils from '../../../utils/positionUtils';
import ImageUploader from './ImageUploader';
import ImageEditor from './ImageEditor';

// Estilos para el scrollbar
const scrollbarStyles = `
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: rgba(156, 163, 175, 0.7);
  }
`;

function BannerPropertyPanel({ 
  component, 
  deviceView, 
  updateStyle, 
  onUpdateContent, 
  onUpdatePosition, 
  onClose, 
  onAlignElements,
  embedded = false // Prop para indicar si está integrado en el sidebar
}) {
  // Estado para estilos
  const [localStyle, setLocalStyle] = useState({});
  // Estado para el contenido
  const [localContent, setLocalContent] = useState('');
  // Estado dedicado para la posición (siempre en %)
  const [localPosition, setLocalPosition] = useState({ top: '0%', left: '0%' });
  // Estado para propiedades responsivas
  const [localAlignment, setLocalAlignment] = useState('default');
  const [localTransform, setLocalTransform] = useState({ transformX: 'none', transformY: 'none' });
  const [localPercentPosition, setLocalPercentPosition] = useState({ percentX: null, percentY: null });
  const [localResponsiveConfig, setLocalResponsiveConfig] = useState({
    keepAspectRatio: false,
    maintainSizeOnMobile: false
  });
  const [activeTab, setActiveTab] = useState('content');
  // Estados para controlar imágenes
  const [imageError, setImageError] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  // Estado para mensajes de advertencia de tamaño
  const [sizeWarning, setSizeWarning] = useState(null);

  // *** Aquí incluiría todas las funciones de manejo de cambios y actualizaciones ***
  // (omitidas por brevedad, mantendrías el código original aquí)

  // Si está integrado, renderizamos la versión compacta
  if (embedded) {
    return (
      <div className="flex-1 overflow-y-auto custom-scrollbar">
        {/* Estilos del scrollbar inline si es necesario */}
        <style>{scrollbarStyles}</style>
        
        {/* Tabs */}
        <div className="flex border-b sticky top-0 bg-white z-10">
          <button
            className={`flex-1 px-3 py-1.5 text-xs font-medium ${
              activeTab === 'content'
                ? 'border-b-2 border-blue-500 text-blue-500'
                : 'text-gray-500 hover:text-gray-700'
            }`}
            onClick={() => setActiveTab('content')}
          >
            Contenido
          </button>
          <button
            className={`flex-1 px-3 py-1.5 text-xs font-medium ${
              activeTab === 'style'
                ? 'border-b-2 border-blue-500 text-blue-500'
                : 'text-gray-500 hover:text-gray-700'
            }`}
            onClick={() => setActiveTab('style')}
          >
            Estilo
          </button>
          <button
            className={`flex-1 px-3 py-1.5 text-xs font-medium ${
              activeTab === 'position'
                ? 'border-b-2 border-blue-500 text-blue-500'
                : 'text-gray-500 hover:text-gray-700'
            }`}
            onClick={() => setActiveTab('position')}
          >
            Posición
          </button>
        </div>

        {/* Contenido de pestañas */}
        <div className="overflow-y-auto">
          {/* Pestaña de Contenido */}
          {activeTab === 'content' && (
            <div className="p-4 space-y-4">
              {/* Aquí iría el contenido de la pestaña de Contenido */}
            </div>
          )}
          
          {/* Pestaña de Estilo */}
          {activeTab === 'style' && (
            <div className="p-3 space-y-4">
              {/* Aquí iría el contenido de la pestaña de Estilo */}
            </div>
          )}
          
          {/* Pestaña de Posición */}
          {activeTab === 'position' && (
            <div className="p-3 space-y-4">
              {/* Aquí iría el contenido de la pestaña de Posición */}
              <ComponentSizeInfo componentId={component.id} />
            </div>
          )}
        </div>
      </div>
    );
  }

  // Versión original del panel (no integrado) con todas las mejoras
  return (
    <div className="w-80 bg-white border-l flex flex-col h-full">
      {/* Estilos del scrollbar inline si es necesario */}
      <style>{scrollbarStyles}</style>
      
      {/* Resto del código para la versión completa */}
    </div>
  );
}

export default BannerPropertyPanel;